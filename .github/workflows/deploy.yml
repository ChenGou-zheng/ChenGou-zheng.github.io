# 用于构建和部署 Hugo 网站到 GitHub Pages 的工作流
name: Build and Deploy Hugo Site

on:
  push:
    # 注意：这里将分支从 master 修改为 main，以匹配当前 GitHub 的默认分支名。
    # 如果您的主分支仍然是 master，请将下面的 main 改回 master。
    branches:
      - master
  
  # 允许您从“Actions”选项卡手动运行此工作流
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      # 需要写入权限才能将构建好的网站推送到 gh-pages 分支
      contents: write

    steps:
      # 第 1 步：检出源码
      # 此步骤保持不变，它会获取您仓库的最新代码。
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          # 确保同样检出主题（作为子模块）
          submodules: false

      # 第 2 步：安装 Hugo
      # 此步骤保持不变。
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      # 第 3 步：构建网站
      # 【核心修改】移除了 --source hugo 参数。
      # 因为您的项目文件已在根目录，hugo 命令会默认在根目录寻找源文件进行构建。
      - name: Build website
        run: hugo --minify

      # 第 4 步：检查并列出构建结果
      # 【核心修改】将检查的目录从 hugo/public 改为 ./public。
      # 因为现在 hugo 会在根目录下生成 public 文件夹。
      - name: Check build output
        run: |
          echo "--- Checking contents of ./public directory ---"
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            ls -R public
          else
            echo "!!! CRITICAL: Build failed. The './public' directory is empty or does not exist."
            exit 1
          fi
          echo "-------------------------------------------------"

      # 第 5 步：部署到 GitHub Pages
      # 【核心修改】将发布的目录 publish_dir 从 ./hugo/public 改为 ./public。
      # 这会告诉部署工具去根目录下的 public 文件夹里寻找要发布的网站内容。
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          # 部署的目标分支保持不变，仍然是 gh-pages
          publish_branch: gh-pages