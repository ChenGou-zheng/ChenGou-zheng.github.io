from pathlib import Path

# --- 配置区 ---
# 指向你的 Hugo content 目录
HUGO_CONTENT_ROOT = Path(r"D:\desktop\ChenGou-zheng.github.io\hugo\content")
# 你可以预定义一些目录的显示名称和顺序
# 格式: "目录名": ("显示名称", 权重)
DIRECTORY_CONFIG = {
    "posts": ("博客", 2),
    "summaries": ("总结", 3),
    "notes": ("笔记", 4),
    "ai": ("AI", 5),
    "robot": ("机器人", 6),
    "tools": ("工具", 7),
    "tags": ("标签", 8)
}
# --- 配置区结束 ---

def generate_menu_config():
    """
    扫描 content 目录并生成 toml 格式的菜单配置。
    """
    if not HUGO_CONTENT_ROOT.is_dir():
        print(f"❗️ 错误：目录 '{HUGO_CONTENT_ROOT}' 不存在。")
        return

    print(f"🔍 正在扫描目录: {HUGO_CONTENT_ROOT}\n")
    
    # 存储找到的目录及其配置
    menu_items = []
    
    # 总是先添加固定的首页
    menu_items.append({
        "name": "首页",
        "url": "/",
        "weight": 1
    })

    # 扫描一级子目录
    for item in HUGO_CONTENT_ROOT.iterdir():
        if item.is_dir():
            dir_name = item.name
            
            # 从预定义配置中获取显示名称和权重
            config = DIRECTORY_CONFIG.get(dir_name)
            
            if config:
                display_name, weight = config
                menu_items.append({
                    "name": display_name,
                    "url": f"/{dir_name}/",
                    "weight": weight
                })
            else:
                # 如果没有预定义，使用目录名作为显示名称，并给一个默认的高权重
                print(f"🔔 发现未配置的目录 '{dir_name}'，将使用默认设置。")
                menu_items.append({
                    "name": dir_name.capitalize(),
                    "url": f"/{dir_name}/",
                    "weight": 99 # 放在最后
                })
    
    # 按权重排序
    menu_items.sort(key=lambda x: x['weight'])
    
    # --- 生成 toml 输出 ---
    print("="*40)
    print("# 请将以下内容复制到你的 hugo.toml 文件中，替换掉旧的 [[menu.main]] 部分")
    print("# Generated by generate_menu.py")
    print("="*40 + "\n")

    for item in menu_items:
        print("[[menu.main]]")
        print(f'  name = "{item["name"]}"')
        print(f'  url = "{item["url"]}"')
        print(f'  weight = {item["weight"]}')
        print("") # 空行以分隔

if __name__ == "__main__":
    generate_menu_config()
